{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Prabal Ghosh Roll-AM.SC.P2CSC20040 Assignment-4 (Machine learning)-Ridge_Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_boston\n",
    "from sklearn.linear_model import Ridge, RidgeCV,Lasso, LassoCV,ElasticNet,ElasticNetCV\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.model_selection import train_test_split\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[6.3200e-03 1.8000e+01 2.3100e+00 0.0000e+00 5.3800e-01 6.5750e+00\n",
      "  6.5200e+01 4.0900e+00 1.0000e+00 2.9600e+02 1.5300e+01 3.9690e+02\n",
      "  4.9800e+00]\n",
      " [2.7310e-02 0.0000e+00 7.0700e+00 0.0000e+00 4.6900e-01 6.4210e+00\n",
      "  7.8900e+01 4.9671e+00 2.0000e+00 2.4200e+02 1.7800e+01 3.9690e+02\n",
      "  9.1400e+00]\n",
      " [2.7290e-02 0.0000e+00 7.0700e+00 0.0000e+00 4.6900e-01 7.1850e+00\n",
      "  6.1100e+01 4.9671e+00 2.0000e+00 2.4200e+02 1.7800e+01 3.9283e+02\n",
      "  4.0300e+00]\n",
      " [3.2370e-02 0.0000e+00 2.1800e+00 0.0000e+00 4.5800e-01 6.9980e+00\n",
      "  4.5800e+01 6.0622e+00 3.0000e+00 2.2200e+02 1.8700e+01 3.9463e+02\n",
      "  2.9400e+00]\n",
      " [6.9050e-02 0.0000e+00 2.1800e+00 0.0000e+00 4.5800e-01 7.1470e+00\n",
      "  5.4200e+01 6.0622e+00 3.0000e+00 2.2200e+02 1.8700e+01 3.9690e+02\n",
      "  5.3300e+00]]\n",
      "[24.  21.6 34.7 33.4 36.2]\n"
     ]
    }
   ],
   "source": [
    "boston = load_boston()\n",
    "x, y = boston.data, boston.target\n",
    "xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.15,random_state=5)\n",
    "print(x[:5])\n",
    "print(y[:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alpha:0.000001, R2:0.741, MSE:21.89, RMSE:4.68\n",
      "Alpha:0.000010, R2:0.741, MSE:21.89, RMSE:4.68\n",
      "Alpha:0.000100, R2:0.741, MSE:21.89, RMSE:4.68\n",
      "Alpha:0.001000, R2:0.741, MSE:21.90, RMSE:4.68\n",
      "Alpha:0.010000, R2:0.740, MSE:21.92, RMSE:4.68\n",
      "Alpha:0.100000, R2:0.732, MSE:22.66, RMSE:4.76\n",
      "Alpha:0.500000, R2:0.686, MSE:26.48, RMSE:5.15\n",
      "Alpha:1.000000, R2:0.635, MSE:30.81, RMSE:5.55\n"
     ]
    }
   ],
   "source": [
    "alphas = [0.000001, 0.00001, 0.0001, 0.001, 0.01, 0.1,0.5, 1]\n",
    "for a in alphas:\n",
    "     model = Ridge(alpha=a, normalize=True).fit(x,y) \n",
    "     score1 = model.score(x, y)\n",
    "     pred_y = model.predict(x)\n",
    "     mse1 = mean_squared_error(y, pred_y) \n",
    "     print(\"Alpha:{0:.6f}, R2:{1:.3f}, MSE:{2:.2f}, RMSE:{3:.2f}\"\n",
    "    .format(a, score1, mse1, np.sqrt(mse1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2:0.708, MSE:21.97, RMSE:4.69\n"
     ]
    }
   ],
   "source": [
    "ridge_mod=Ridge(alpha=0, normalize=True).fit(xtrain,ytrain)\n",
    "ypred = ridge_mod.predict(xtest)\n",
    "score = model.score(xtest,ytest)\n",
    "mse = mean_squared_error(ytest,ypred)\n",
    "print(\"R2:{0:.3f}, MSE:{1:.2f}, RMSE:{2:.2f}\"\n",
    "   .format(score, mse,np.sqrt(mse)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-9.98280011e-02  2.90131915e-02 -5.42428303e-02  3.16760873e+00\n",
      " -9.33761834e+00  3.95757186e+00 -4.92355047e-03 -1.02814612e+00\n",
      "  1.42835909e-01 -4.64957048e-03 -7.93976266e-01  1.12368155e-02\n",
      " -5.11831118e-01]\n",
      "R2:0.708, MSE:20.58, RMSE:4.54\n"
     ]
    }
   ],
   "source": [
    "ridge_mod=Ridge(alpha=0.1, normalize=True).fit(xtrain,ytrain)\n",
    "print(ridge_mod.coef_)\n",
    "ypred = ridge_mod.predict(xtest)\n",
    "score = model.score(xtest,ytest)\n",
    "mse = mean_squared_error(ytest,ypred)\n",
    "print(\"R2:{0:.3f}, MSE:{1:.2f}, RMSE:{2:.2f}\"\n",
    "   .format(score, mse,np.sqrt(mse)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_ax = range(len(xtest))\n",
    "plt.scatter(x_ax, ytest, s=5, color=\"blue\", label=\"original\")\n",
    "plt.plot(x_ax, ypred, lw=.8, color=\"red\", label=\"predicted\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.1\n"
     ]
    }
   ],
   "source": [
    "ridge_cv1=RidgeCV(alphas=alphas, store_cv_values=True)\n",
    "ridge_mod1 = ridge_cv1.fit(xtrain,ytrain)\n",
    "print(ridge_mod1.alpha_)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2:0.702, MSE:22.12, RMSE:4.70\n"
     ]
    }
   ],
   "source": [
    "ypred = ridge_mod1.predict(xtest)\n",
    "score = ridge_mod1.score(xtest,ytest)\n",
    "mse = mean_squared_error(ytest,ypred)\n",
    "print(\"R2:{0:.3f}, MSE:{1:.2f}, RMSE:{2:.2f}\"\n",
    "   .format(score, mse, np.sqrt(mse)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-0.05556583  0.01487832 -0.01103095  2.63039589 -6.73439396  4.0825522\n",
      " -0.         -0.78474758  0.01397373 -0.         -0.77189066  0.00973547\n",
      " -0.58682954]\n"
     ]
    }
   ],
   "source": [
    "lasso1=Lasso(alpha=0.01, normalize=True)\n",
    "lasso_1 = lasso1.fit(xtrain,ytrain)\n",
    "print(lasso_1.coef_)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-5.26280902e-02  1.53057678e-02 -6.38061739e-02  1.62166225e+00\n",
      " -3.08327562e+00  1.99845278e+00 -9.38792401e-03 -5.03800839e-02\n",
      " -2.09721066e-02 -2.37416922e-03 -3.75802860e-01  4.99256816e-03\n",
      " -1.95098724e-01]\n"
     ]
    }
   ],
   "source": [
    "elastic1=ElasticNet(alpha=0.01, normalize=True)\n",
    "elastic_1 = elastic1.fit(xtrain,ytrain)\n",
    "print(elastic_1.coef_)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
